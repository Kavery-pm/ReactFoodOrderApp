{"ast":null,"code":"var _jsxFileName = \"E:\\\\React Food Order\\\\src\\\\store\\\\cart-provider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD_ITEM\") {\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItems;\n    let updatedItem;\n\n    if (existingCartItem) {\n      updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else updatedItems = state.items.concat(action.item); // const updatedItems = state.items.concat(action.item);\n\n\n    console.log(updatedItems);\n    const updatedAmount = state.totalAmount + action.item.amount * action.item.price;\n    return {\n      items: updatedItems,\n      totalAmount: updatedAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD_ITEM\",\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {};\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["E:/React Food Order/src/store/cart-provider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","existingCartItemIndex","findIndex","item","id","existingCartItem","updatedItems","updatedItem","amount","concat","console","log","updatedAmount","price","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AACA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,WAAW,EAAE;AAFU,CAAzB;;AAIA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,MAAIA,MAAM,CAACC,IAAP,KAAgB,UAApB,EAAgC;AAC5B,UAAMC,qBAAqB,GAAGH,KAAK,CAACH,KAAN,CAAYO,SAAZ,CAAsBC,IAAI,IAAEA,IAAI,CAACC,EAAL,KAAYL,MAAM,CAACI,IAAP,CAAYC,EAApD,CAA9B;AACA,UAAMC,gBAAgB,GAAGP,KAAK,CAACH,KAAN,CAAYM,qBAAZ,CAAzB;AACA,QAAIK,YAAJ;AACA,QAAIC,WAAJ;;AACA,QAAGF,gBAAH,EAAoB;AACjBE,MAAAA,WAAW,GAAG,EACV,GAAGF,gBADO;AAEVG,QAAAA,MAAM,EAAEH,gBAAgB,CAACG,MAAjB,GAA0BT,MAAM,CAACI,IAAP,CAAYK;AAFpC,OAAd;AAIAF,MAAAA,YAAY,GAAG,CAAC,GAAGR,KAAK,CAACH,KAAV,CAAf;AACAW,MAAAA,YAAY,CAACL,qBAAD,CAAZ,GAAoCM,WAApC;AACF,KAPD,MAOMD,YAAY,GAAGR,KAAK,CAACH,KAAN,CAAYc,MAAZ,CAAmBV,MAAM,CAACI,IAA1B,CAAf,CAZsB,CAa/B;;;AACCO,IAAAA,OAAO,CAACC,GAAR,CAAYL,YAAZ;AACA,UAAMM,aAAa,GACjBd,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACI,IAAP,CAAYK,MAAZ,GAAqBT,MAAM,CAACI,IAAP,CAAYU,KADvD;AAEA,WAAO;AACLlB,MAAAA,KAAK,EAAEW,YADF;AAELV,MAAAA,WAAW,EAAEgB;AAFR,KAAP;AAID;;AACD,SAAOlB,gBAAP;AACD,CAxBD;;AAyBA,MAAMoB,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkCzB,UAAU,CAChDK,WADgD,EAEhDH,gBAFgD,CAAlD;;AAIA,QAAMwB,oBAAoB,GAAIf,IAAD,IAAU;AACrCc,IAAAA,kBAAkB,CAAC;AAAEjB,MAAAA,IAAI,EAAE,UAAR;AAAoBG,MAAAA,IAAI,EAAEA;AAA1B,KAAD,CAAlB;AACD,GAFD;;AAGA,QAAMgB,yBAAyB,GAAIf,EAAD,IAAQ,CAAE,CAA5C;;AACA,QAAMgB,WAAW,GAAG;AAClBzB,IAAAA,KAAK,EAAEqB,SAAS,CAACrB,KADC;AAElBC,IAAAA,WAAW,EAAEoB,SAAS,CAACpB,WAFL;AAGlByB,IAAAA,OAAO,EAAEH,oBAHS;AAIlBI,IAAAA,UAAU,EAAEH;AAJM,GAApB;AAMA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cACGL,KAAK,CAACQ;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CApBD;;GAAMT,Y;;KAAAA,Y;AAsBN,eAAeA,YAAf","sourcesContent":["import { useReducer } from \"react\";\r\nimport CartContext from \"./cart-context\";\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmount: 0,\r\n};\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === \"ADD_ITEM\") {\r\n      const existingCartItemIndex = state.items.findIndex(item=>item.id === action.item.id);\r\n      const existingCartItem = state.items[existingCartItemIndex];\r\n      let updatedItems;\r\n      let updatedItem;\r\n      if(existingCartItem){\r\n         updatedItem = {\r\n             ...existingCartItem,\r\n             amount: existingCartItem.amount + action.item.amount\r\n         }\r\n         updatedItems = [...state.items];\r\n         updatedItems[existingCartItemIndex]=updatedItem;\r\n      }else updatedItems = state.items.concat(action.item);\r\n   // const updatedItems = state.items.concat(action.item);\r\n    console.log(updatedItems);\r\n    const updatedAmount =\r\n      state.totalAmount + action.item.amount * action.item.price;\r\n    return {\r\n      items: updatedItems,\r\n      totalAmount: updatedAmount,\r\n    };\r\n  }\r\n  return defaultCartState;\r\n};\r\nconst CartProvider = (props) => {\r\n  const [cartState, dispatchCartAction] = useReducer(\r\n    cartReducer,\r\n    defaultCartState\r\n  );\r\n  const addItemToCartHandler = (item) => {\r\n    dispatchCartAction({ type: \"ADD_ITEM\", item: item });\r\n  };\r\n  const removeItemFromCartHandler = (id) => {};\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemToCartHandler,\r\n    removeItem: removeItemFromCartHandler,\r\n  };\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}