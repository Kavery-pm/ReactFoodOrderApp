{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shiny\\\\Downloads\\\\ReactFoodOrderApp\\\\src\\\\store\\\\cart-provider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from 'react';\nimport CartContext from './cart-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmountBill: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const updatedTotalAmountBill = +(state.totalAmountBill + action.item.price * action.item.amount); //console.log(updatedTotalAmountBill,'reducer')\n\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.items[existingCartItemIndex]; //to sum above steps use directly find() method to get the item directly\n\n    let updatedItems; //console.log(existingCartItem, existingCartItemIndex)\n\n    if (existingCartItem) {\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items]; //copying the state cart items to update this referential value immutably\n\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item); //[..state.items, action.item]\n    }\n    /*  const index = state.items.findIndex(el => el.id === action.item.id);\r\n       if (index === -1) {\r\n          updatedItems = [...state.items, action.item];\r\n       } else {\r\n          updatedItems = [...state.items];\r\n          updatedItems[index].amount += action.item.amount;\r\n       } */\n\n\n    return {\n      items: updatedItems,\n      totalAmountBill: updatedTotalAmountBill\n    };\n  }\n\n  if (action.type === 'REMOVE') {\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.id);\n    const existingCartItem = state.items[existingCartItemIndex]; //console.log(existingCartItem, 'index', existingCartItemIndex);\n\n    let updatedItems;\n    const updatedTotalAmountBill = state.totalAmountBill - existingCartItem.price;\n\n    if (existingCartItem.amount === 1) {\n      updatedItems = state.items.filter(item => item.id !== existingCartItem.id); //(item) => item.id !== action.id\n    } else {\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount - 1\n      };\n      updatedItems = [...state.items]; //console.log(updatedItems)\n\n      updatedItems[existingCartItemIndex] = updatedItem;\n    }\n    /* const index = state.items.findIndex(el => el.id === action.id);\r\n      if (state.items[index].amount === 1) {\r\n         updatedItems = state.items.filter(el => el.id !== action.id);\r\n      } else {\r\n         updatedItems = [...state.items];\r\n         updatedItems[index].amount -= 1;\r\n      } */\n    //if(updatedTotalAmount < 0) updatedTotalAmount = 0;\n\n\n    return {\n      items: updatedItems,\n      totalAmountBill: updatedTotalAmountBill\n    };\n  }\n\n  if (action.type === 'CLEAR') {\n    return defaultCartState;\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    //item obj contains all the data i.e. name, amounts of the item, price etc\n    dispatchCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n\n  const clearCartHandler = () => {\n    dispatchCartAction({\n      type: 'CLEAR'\n    });\n  }; //console.log('Beofre', cartState.totalAmountBill);\n\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmountBill: cartState.totalAmountBill,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler,\n    clearCart: clearCartHandler\n  }; // console.log(cartState.totalAmountBill,'Just do It', cartContext.totalAmountBill)\n  //console.log(typeof cartState.totalAmountBill, typeof cartContext.totalAmountBill);\n  //console.log(cartState.items,'ctx', cartContext.items)\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/Users/shiny/Downloads/ReactFoodOrderApp/src/store/cart-provider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmountBill","cartReducer","state","action","type","updatedTotalAmountBill","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","concat","filter","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","clearCartHandler","cartContext","addItem","removeItem","clearCart","children"],"mappings":"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","sourcesContent":["import { useReducer } from 'react';\r\n\r\nimport CartContext from './cart-context';\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmountBill: 0\r\n} ;\r\n\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === 'ADD') {\r\n    \r\n    const updatedTotalAmountBill = +(state.totalAmountBill + (action.item.price * action.item.amount));\r\n    //console.log(updatedTotalAmountBill,'reducer')\r\n    \r\n    const existingCartItemIndex = state.items.findIndex((item) => item.id === action.item.id);\r\n    const existingCartItem = state.items[existingCartItemIndex];\r\n    //to sum above steps use directly find() method to get the item directly\r\n    let updatedItems;\r\n    //console.log(existingCartItem, existingCartItemIndex)\r\n\r\n    if(existingCartItem){\r\n      const updatedItem = {\r\n        ...existingCartItem,\r\n        amount: existingCartItem.amount + action.item.amount\r\n      }\r\n\r\n      updatedItems = [...state.items]; //copying the state cart items to update this referential value immutably\r\n      updatedItems[existingCartItemIndex] = updatedItem;\r\n    }else{\r\n      updatedItems = state.items.concat(action.item);//[..state.items, action.item]\r\n    }\r\n\r\n   /*  const index = state.items.findIndex(el => el.id === action.item.id);\r\n      if (index === -1) {\r\n         updatedItems = [...state.items, action.item];\r\n      } else {\r\n         updatedItems = [...state.items];\r\n         updatedItems[index].amount += action.item.amount;\r\n      } */\r\n    \r\n    return {\r\n      items: updatedItems,\r\n      totalAmountBill: updatedTotalAmountBill\r\n    };\r\n  }\r\n  \r\n  if(action.type === 'REMOVE'){\r\n\r\n    const existingCartItemIndex = state.items.findIndex((item) => item.id === action.id);\r\n    const existingCartItem = state.items[existingCartItemIndex];\r\n    //console.log(existingCartItem, 'index', existingCartItemIndex);\r\n    let updatedItems;\r\n    const updatedTotalAmountBill = state.totalAmountBill - existingCartItem.price;\r\n\r\n    if(existingCartItem.amount === 1){ \r\n      updatedItems = state.items.filter((item) => item.id !== existingCartItem.id)//(item) => item.id !== action.id\r\n    }else{\r\n      const updatedItem = { ...existingCartItem, amount: existingCartItem.amount - 1 };\r\n      updatedItems = [...state.items];\r\n      //console.log(updatedItems)\r\n      updatedItems[existingCartItemIndex] = updatedItem;\r\n    }\r\n\r\n    /* const index = state.items.findIndex(el => el.id === action.id);\r\n      if (state.items[index].amount === 1) {\r\n         updatedItems = state.items.filter(el => el.id !== action.id);\r\n      } else {\r\n         updatedItems = [...state.items];\r\n         updatedItems[index].amount -= 1;\r\n      } */\r\n    //if(updatedTotalAmount < 0) updatedTotalAmount = 0;\r\n    return {\r\n      items: updatedItems,\r\n      totalAmountBill: updatedTotalAmountBill\r\n    };\r\n  }\r\n\r\n  if(action.type === 'CLEAR'){\r\n    return defaultCartState;\r\n  }\r\n  \r\n  return defaultCartState;\r\n}; \r\n\r\nconst CartProvider = (props) => {\r\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\r\n\r\n  const addItemToCartHandler = (item) => { //item obj contains all the data i.e. name, amounts of the item, price etc\r\n    dispatchCartAction({type: 'ADD', item: item});\r\n  };\r\n\r\n  const removeItemFromCartHandler = (id) => {\r\n    dispatchCartAction({type: 'REMOVE', id: id});\r\n  };\r\n\r\n  const clearCartHandler = () => {\r\n    dispatchCartAction({type: 'CLEAR'});\r\n  }\r\n\r\n  //console.log('Beofre', cartState.totalAmountBill);\r\n  \r\n\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmountBill: cartState.totalAmountBill,\r\n    addItem: addItemToCartHandler, \r\n    removeItem: removeItemFromCartHandler,\r\n    clearCart: clearCartHandler,\r\n  };\r\n // console.log(cartState.totalAmountBill,'Just do It', cartContext.totalAmountBill)\r\n  //console.log(typeof cartState.totalAmountBill, typeof cartContext.totalAmountBill);\r\n  //console.log(cartState.items,'ctx', cartContext.items)\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider; "]},"metadata":{},"sourceType":"module"}