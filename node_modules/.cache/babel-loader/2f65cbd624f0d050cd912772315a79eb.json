{"ast":null,"code":"import _slicedToArray from\"C:/Users/shiny/Downloads/ReactFoodOrderApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _toConsumableArray from\"C:/Users/shiny/Downloads/ReactFoodOrderApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"C:/Users/shiny/Downloads/ReactFoodOrderApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{useReducer}from'react';import CartContext from'./cart-context';import{jsx as _jsx}from\"react/jsx-runtime\";var defaultCartState={items:[],totalAmountBill:0};var cartReducer=function cartReducer(state,action){if(action.type==='ADD'){var updatedTotalAmountBill=+(state.totalAmountBill+action.item.price*action.item.amount);//console.log(updatedTotalAmountBill,'reducer')\nvar existingCartItemIndex=state.items.findIndex(function(item){return item.id===action.item.id;});var existingCartItem=state.items[existingCartItemIndex];//to sum above steps use directly find() method to get the item directly\nvar updatedItems;//console.log(existingCartItem, existingCartItemIndex)\nif(existingCartItem){var updatedItem=_objectSpread(_objectSpread({},existingCartItem),{},{amount:existingCartItem.amount+action.item.amount});updatedItems=_toConsumableArray(state.items);//copying the state cart items to update this referential value immutably\nupdatedItems[existingCartItemIndex]=updatedItem;}else{updatedItems=state.items.concat(action.item);//[..state.items, action.item]\n}/*  const index = state.items.findIndex(el => el.id === action.item.id);\r\n      if (index === -1) {\r\n         updatedItems = [...state.items, action.item];\r\n      } else {\r\n         updatedItems = [...state.items];\r\n         updatedItems[index].amount += action.item.amount;\r\n      } */return{items:updatedItems,totalAmountBill:updatedTotalAmountBill};}if(action.type==='REMOVE'){var _existingCartItemIndex=state.items.findIndex(function(item){return item.id===action.id;});var _existingCartItem=state.items[_existingCartItemIndex];//console.log(existingCartItem, 'index', existingCartItemIndex);\nvar _updatedItems;var _updatedTotalAmountBill=state.totalAmountBill-_existingCartItem.price;if(_existingCartItem.amount===1){_updatedItems=state.items.filter(function(item){return item.id!==_existingCartItem.id;});//(item) => item.id !== action.id\n}else{var _updatedItem=_objectSpread(_objectSpread({},_existingCartItem),{},{amount:_existingCartItem.amount-1});_updatedItems=_toConsumableArray(state.items);//console.log(updatedItems)\n_updatedItems[_existingCartItemIndex]=_updatedItem;}/* const index = state.items.findIndex(el => el.id === action.id);\r\n      if (state.items[index].amount === 1) {\r\n         updatedItems = state.items.filter(el => el.id !== action.id);\r\n      } else {\r\n         updatedItems = [...state.items];\r\n         updatedItems[index].amount -= 1;\r\n      } */ //if(updatedTotalAmount < 0) updatedTotalAmount = 0;\nreturn{items:_updatedItems,totalAmountBill:_updatedTotalAmountBill};}if(action.type==='CLEAR'){return defaultCartState;}return defaultCartState;};var CartProvider=function CartProvider(props){var _useReducer=useReducer(cartReducer,defaultCartState),_useReducer2=_slicedToArray(_useReducer,2),cartState=_useReducer2[0],dispatchCartAction=_useReducer2[1];var addItemToCartHandler=function addItemToCartHandler(item){//item obj contains all the data i.e. name, amounts of the item, price etc\ndispatchCartAction({type:'ADD',item:item});};var removeItemFromCartHandler=function removeItemFromCartHandler(id){dispatchCartAction({type:'REMOVE',id:id});};var clearCartHandler=function clearCartHandler(){dispatchCartAction({type:'CLEAR'});};//console.log('Beofre', cartState.totalAmountBill);\nvar cartContext={items:cartState.items,totalAmountBill:cartState.totalAmountBill,addItem:addItemToCartHandler,removeItem:removeItemFromCartHandler,clearCart:clearCartHandler};// console.log(cartState.totalAmountBill,'Just do It', cartContext.totalAmountBill)\n//console.log(typeof cartState.totalAmountBill, typeof cartContext.totalAmountBill);\n//console.log(cartState.items,'ctx', cartContext.items)\nreturn/*#__PURE__*/_jsx(CartContext.Provider,{value:cartContext,children:props.children});};export default CartProvider;","map":{"version":3,"sources":["C:/Users/shiny/Downloads/ReactFoodOrderApp/src/store/cart-provider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmountBill","cartReducer","state","action","type","updatedTotalAmountBill","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","concat","filter","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","clearCartHandler","cartContext","addItem","removeItem","clearCart","children"],"mappings":"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","sourcesContent":["import { useReducer } from 'react';\r\n\r\nimport CartContext from './cart-context';\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmountBill: 0\r\n} ;\r\n\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === 'ADD') {\r\n    \r\n    const updatedTotalAmountBill = +(state.totalAmountBill + (action.item.price * action.item.amount));\r\n    //console.log(updatedTotalAmountBill,'reducer')\r\n    \r\n    const existingCartItemIndex = state.items.findIndex((item) => item.id === action.item.id);\r\n    const existingCartItem = state.items[existingCartItemIndex];\r\n    //to sum above steps use directly find() method to get the item directly\r\n    let updatedItems;\r\n    //console.log(existingCartItem, existingCartItemIndex)\r\n\r\n    if(existingCartItem){\r\n      const updatedItem = {\r\n        ...existingCartItem,\r\n        amount: existingCartItem.amount + action.item.amount\r\n      }\r\n\r\n      updatedItems = [...state.items]; //copying the state cart items to update this referential value immutably\r\n      updatedItems[existingCartItemIndex] = updatedItem;\r\n    }else{\r\n      updatedItems = state.items.concat(action.item);//[..state.items, action.item]\r\n    }\r\n\r\n   /*  const index = state.items.findIndex(el => el.id === action.item.id);\r\n      if (index === -1) {\r\n         updatedItems = [...state.items, action.item];\r\n      } else {\r\n         updatedItems = [...state.items];\r\n         updatedItems[index].amount += action.item.amount;\r\n      } */\r\n    \r\n    return {\r\n      items: updatedItems,\r\n      totalAmountBill: updatedTotalAmountBill\r\n    };\r\n  }\r\n  \r\n  if(action.type === 'REMOVE'){\r\n\r\n    const existingCartItemIndex = state.items.findIndex((item) => item.id === action.id);\r\n    const existingCartItem = state.items[existingCartItemIndex];\r\n    //console.log(existingCartItem, 'index', existingCartItemIndex);\r\n    let updatedItems;\r\n    const updatedTotalAmountBill = state.totalAmountBill - existingCartItem.price;\r\n\r\n    if(existingCartItem.amount === 1){ \r\n      updatedItems = state.items.filter((item) => item.id !== existingCartItem.id)//(item) => item.id !== action.id\r\n    }else{\r\n      const updatedItem = { ...existingCartItem, amount: existingCartItem.amount - 1 };\r\n      updatedItems = [...state.items];\r\n      //console.log(updatedItems)\r\n      updatedItems[existingCartItemIndex] = updatedItem;\r\n    }\r\n\r\n    /* const index = state.items.findIndex(el => el.id === action.id);\r\n      if (state.items[index].amount === 1) {\r\n         updatedItems = state.items.filter(el => el.id !== action.id);\r\n      } else {\r\n         updatedItems = [...state.items];\r\n         updatedItems[index].amount -= 1;\r\n      } */\r\n    //if(updatedTotalAmount < 0) updatedTotalAmount = 0;\r\n    return {\r\n      items: updatedItems,\r\n      totalAmountBill: updatedTotalAmountBill\r\n    };\r\n  }\r\n\r\n  if(action.type === 'CLEAR'){\r\n    return defaultCartState;\r\n  }\r\n  \r\n  return defaultCartState;\r\n}; \r\n\r\nconst CartProvider = (props) => {\r\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\r\n\r\n  const addItemToCartHandler = (item) => { //item obj contains all the data i.e. name, amounts of the item, price etc\r\n    dispatchCartAction({type: 'ADD', item: item});\r\n  };\r\n\r\n  const removeItemFromCartHandler = (id) => {\r\n    dispatchCartAction({type: 'REMOVE', id: id});\r\n  };\r\n\r\n  const clearCartHandler = () => {\r\n    dispatchCartAction({type: 'CLEAR'});\r\n  }\r\n\r\n  //console.log('Beofre', cartState.totalAmountBill);\r\n  \r\n\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmountBill: cartState.totalAmountBill,\r\n    addItem: addItemToCartHandler, \r\n    removeItem: removeItemFromCartHandler,\r\n    clearCart: clearCartHandler,\r\n  };\r\n // console.log(cartState.totalAmountBill,'Just do It', cartContext.totalAmountBill)\r\n  //console.log(typeof cartState.totalAmountBill, typeof cartContext.totalAmountBill);\r\n  //console.log(cartState.items,'ctx', cartContext.items)\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider; "]},"metadata":{},"sourceType":"module"}